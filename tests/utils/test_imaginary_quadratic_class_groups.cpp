#include "cado.h" // IWYU pragma: keep

#include <cstdlib>
#include <tuple>
#include <vector>

#include "fmt/base.h"

#include "gmp_aux.h"
#include "tests_common.h"
#include "misc.h"
#include "imaginary_quadratic_class_groups.hpp"

/* Discriminants are random and bounds are computed with SageMath using:
 *    ceil(RBF(6*log(D.abs())^2))
 */
static const std::vector<std::pair<cxx_mpz, unsigned long>> Discriminants = {
    { "-10177485165988968193564081475452339681326044882478287649133283818624329606393371409096389867782029151640356563779578198855831489097588402157743070665974895"_mpz, 754514U },
    { "-773857695344954267209009782697385933904703915705862117005616727998093908488488178433862455627388763342401979516158139442655537399731453135028783143078257608337576342520013442413162783737115821006035895946967653949443032466136225575"_mpz, 1695852U },
    { "-33734443758724307200022693083846790391292013125047841869127856356782872631041981528619301724629102931189601668246774912146027492149375477477362843788345385263991981590441374379639268657935046370402370236003667782059770309708981062746194574541595658001382302280428360822237315144662396211547728783672697424443"_mpz, 3008515U },
    { "-11813842220228707144312439109151679640090098631213360548850774842948485591054550270786309220101042551403449971868144219125239973881135901457064053303889323485826430755604869733147850362291936834105023064449383238794323857925233483534703592925007257269680700102029492500741492201754837172500638546401817134259828791201920480702251281722479377567639126926071750858601663180339837882834020"_mpz, 4717017U },
    { "-1353468511697332198442777490529501119556654028076983148917790587207433288803791333485186355387710867478210348853937001711460299358496719402707713131200225302180182351765482172303438053895120891149857094822941247556326439735415048237337083237835771607467434640144669059556680065580946277031321733317978304314133550895610839143075080756948509553981431088832074478775865139598634295224057956002358364263980779338141771323401076345788740666366368415124709468002993780"_mpz, 6793815U },
    { "-166093649022857299473749826260012533920222615933842226633889540503717823063070662361236440438816784870113846660635602267985504071807121182688734094184917976594374800197081684103542017858635985325401636889229559130293474131067304640383760655117929673164875789332739599912653063284111193264484529573437056353718733476191544196083982208216149333286919111204178567969449681132953486722227941111603682755642120190610645789628205838631960179781670275917470995758923133450379188440563734905293124507474697891039524754345331760621976936638030987436"_mpz, 9249435U },
    { "-17160760771367993136917863782058152536561864305877573443190187597640953050190009200562565304207856264245207887870295388847277763405574131603338438647104984168504704421889824383442811591148096921398064280437697723325394517314585716366423127451071821868348963892366114625238402453611385677922712421468864958359846743979106977992445723101700356408488659749954601364903068092369159114686165565234704509988502610226643494106598557449652550442076231092460259758657137737363729522796349517541025058775957480347310036562615640619519979288237922439275656355979937330215239209394372264327565524892446956118797180023983101648931"_mpz, 12080216U },
    { "-1212159926467904111113444617889753271011370572744570658655191994603355355264590335436334385196305529656098350719844243125694230578131407682935502159824809980283029222080032934753287425848728214447304397795073685625000910176248228832488089675707517549234820601736122927047814315471076008820605011673229526235233018270243456913369551747123016898552336319658224058025169214578867445733386034661019898458773356236269900248184719991478326546427445750802641791079008542836817538800249760945348672011374462457080332816204348923374831090737033304888111922503251030160280535492158286896237470209183475369265256204761599214294780197590517476755168856661077505266107450435233895288142588945789678346320175"_mpz, 15281073U },
    { "-182311679901005830477915594164469016185000072746174912306007384147098128493249963992571552761376547481811370839850686389357116271058839622597578976967694686999387522727399395499964422189310755092172665893634573284123171555168730256401910251792209296013762053403387890299275916786256910604282186379013207610307978344449075674546764076394450021338864684150106445054294814328577288640336321889865101249947635842099706304070486173199081007912527794210645071482138313960607310878275524119981198388846466710344077850163507392496031085764121891377942638792937103623630020089988462632947691319230217806657935619958273721028617142602726526013259763752033443619555739750135489608350893910060613155976721302361101762158285843680649599400627523618687651594682565567952811883200363151"_mpz, 18873752U },
    { "-37221890977660813226054360940827007327972199212990021216484679293433601002042801629794743857646658061735481898033403623405498362713391771046514547455867516037608191769894272399925558088361088287110800614545355455558563116922731857954751075192064677931379954565801015042263127076921813810667775443202781994116491212662405994842680605400846604425962497110946586389492966328169931432665179102219266044494454325265218879931570131840258367290870973120395948186112973929123236643583424620831598747455744622938567669159321276254020501228883319552301789292537049353218400776997447158484648443295710913082034354239236316213464106756918587778440634808127770865864434542057676069937091237673249856557994970220484367025984098373488640919672413552145737044934549443132732038299476244577791416949504143508968824170273184517706777930051117293513781663093015242912"_mpz, 22852547U },
    { "-3332018941857372541645783684956151334960731437028244961099786728197555297258155906099933120438276185011716655103511944823151282141259615719286703066911971194695922405327454300247004020087121240364348153809106485816515969964436111450527894000395714038557707986072166525485318945534792219592524950646626758746202044246168568551062142087890334059619710022933264043374443679172854638205363832082998054998743194347390503824638091321665103528872498933923723852778455101955921457281115019875743538314963489344819552303910843323390439749500252890564665324470028846457696911966767473675786175592847124988306396758610090908296786429900094991655161215975171260704893719178839674473488092122323476103214840718833415211438230617741120613542494357068514441664033665824531484569565358692619214197394112853731452423385052973380457513257385814686169107498583813844535384379243202294517335770418624457673006704625027889663967314529461881430180"_mpz, 27190538U },
    { "-562806856280619193492476706386311880267393810908504715554100977516331394453277340389914739965612145626186481408380335489533897668599678225498201741803735871894628422252301468796094505363100477121783136304794970552934272742007651905021607895063784109104826348670999951931010279666209697709577223190512449799521098250262318762166249329258704438626328023561699159654899332117578954551683215596863119925158720785617971650956194242153664878112669530857432531324471312890637914955616326617105306398583432785944907792832410680461887958970300324693784054461700839671471517679018190989651339969595904150908550327373535774851012872731124499930922228914502715339421006284115207857077174183365028054662582872310724896579467906777905101969820885365475540683719439988975970143688536703329917694425168424037990176198162193415389680761110587927622719981791535713526358705999187211404506964976795040175704891450810752360007283244935199850325543360073037330714775619023323826656637162414211206670337829065874632718405095"_mpz, 31922849U },
    { "-62887136315269839056324492342513295431594382450322999367002786643560214685784660845849947512599054762332891540831562910603337078517661700110384901246249045233092855957308555293138136336013680102667048051653079525398895932120786599285312989700861335247622724595941890140270392707981718335065377933969609503342246913771395813774875404473351755310397861811788667040402340068514874059983584344008046801895605571044365961354291050921118290142281039325239790833450571078543560437531778990525207085368210865362142431888180280804694192574421863934051623713393680058619654257696123962480024913128554294471860844048299277765770240843965441345764536505802590027503913946153531833711124157683281089411060784920774848822474389558972322197437437655541535313002527286931517996093797140805956102279190621916900776783409752249627066402141395971325093742216478692005253049530030634502454430339722928438157432684970110703082654793845753797512338546508497461772069265683550775390927259979436738956129003162542515526434499888546025856901091677287259119598838638000076036691459924730055752837167460835"_mpz, 37022296U },
    { "-1547747434630215623035536465732503362520252321072682934726865059957674096607188084725484205990014326637689389074635827936535393099376444372265776883737653311068457710510117277207840217538707425024845193321870818959754092410254953692903251847265952938766233258777731279607461659553746205411431775459915533315402655903128156588696761719160999978694389805294629897594430740250447265376878548233336080948734853644773125395732871490668069112571303943196675220502958196844768183439793523268936471435911470849251698271764228756102216081522415489359144538410324957101292642494048791840285756583862686438875892666165071809346450930806816994807662151952156936492276283321179133676104171911647567051237513312416443330858910402836229090447156690331395707028278636652850284281024898826716280346538167611144069696942705287028372055844238033863118419265806830001939070071741291712287390040437056005013389153365696411951542930033022129193569701046810046723616264813850417706289484174301601213885079258059480063758395929008238340438436510413721018281227690290120611796955087961217175670631558569559306448820855504762167428691700221991812146173510651646951407312411508893148"_mpz, 42451129U },
    { "-35302403117805115305778662010739263857302702318094215261497077708889982887983370995530318458519070100700720770017671047079064033166809707817449843758378591265053562268787233640305934831452834379131325798331112275667897746125505708754482601390717306260504352279362431062284289330691158332075771050755898744342300091980236789209721255884729259659414095896550664992477545729528406291336622599594898204004784283598870854966609149308828626615129423441786082094020320450469282668531753205961866761224603560001098342782857505818829330477610470240125759921468087667968033558662221467876872221330281592597249489339269560533203941798398009565368321712112561091682886219666651362702204877811870421832027256245176927393670619010247269700806752282324681376843221088509950456187816134523599029031314440984245635712515388233149447047788904799987709242618368980057875485231592889163626658969484810072100030302392257274653625860290674647627953382571300579577331463848779904488821850607291738250596861302886374438564388380370263974711308868088338616085874090085002239844286543976042304791206291011379945893915916159327551331101137818546542352046136893718019780451750519595859415034843864639339087928918827279441024505384466706998824653989973602528776"_mpz, 48248652U },
    { "-45683672823851612217134358666293299048396368987016679535507998310857625870406462789669769462826311445814506440989985288997947544096173341389040138907018243860832331800507669387680342246232121134665692542358378303395314036474284284395799412157019370528061137412772614141623294525739125720261394490405313395516873458198862271379941038359627587471785969307958536902831880289609866074677864692682097160223157494463809670848531524376341451501858621098507722349473712825465827711559740975618509120336485870026150719762921195107297289517420888609600106692343125328921957575962765595061279734703146813163323174808751726119402382878716198381238523269767448685698454851913418684822377514921737502089213166090675681126962931459905281421923937628295828733484983733312819709674357267631195596390472721961703059131235842167833206637664477679510305465239846338955115446181661333886389954036593468253279323931111446356979799226548331041903761228777079667899407095405257255736693915859280946066363952787588692190452829065730747202606873440694207310477316396709870482521757890826418842680683506599062789407229602467152046453170747495526307152843744308832667947148446699224045275130031189497541553467976212643207284961956123112003562264986565286905724132377313483400110566226173522015699704769579881934889288508930486633630592536"_mpz, 54563171U },
    { "-7245694391696969224081490223888989445297393771186216912113675354366578731244140159939514034127974014783303649668589930046069617043669921220652595514012136695104005788740101948040590079694035006095889504250923736286800837565964977646754770372888996844826654313094814135526252922394432801276072471275239902161658202590619689922816862978229459077257478869831112320822374277448946723818107499171072574235093288630118819509493303578697749204797753505636830226570093720418824115796785702189223166393898096672341252671696195712410643891560176786532621944830110090563728635995623949002878803230144188067118035171059625337842226291787707071842315773508218973600699248829410771629535658237809268363283286830760106979041250413911068683913196366942553601008337017253897310203345317921175485396596258778501323506953277546490760107454777036523942833068657878978568259527656099883171549051717963833802990834572155313367348763281110350695237539983869614490095991820117056122678154244167043331499934620632619726830280931979346539262201008520718925576126422875326636770106418397105343549460703806425430976761581966483061462323847372938411487868412890228064998266267262268488295562641945919688630924406263237934299041013802107846842649297105636368554642802069786257117194385449263817973856982616372557279329739022589619039005821134228967674290379445090066706606888674721636715690806197449449220904606931716"_mpz, 61185417U },
    { "-1254782371515988662277893922956700728974647523837186746417542283793838332687632807865710731824363458411253570715529093455421504715233177911763069483895883276328241804226525801920519502250620682295745126064546562758967494271348222466193450812816404936347853414976852861204973405174414860636969396606809731394401687360169457223834928158994831390429380645866615445182575783942927054414808743826471944612902584687689596261061824033605071958518478700263950160076644529390382535478333370306827109911848994047241758259940176947318784629000348515054257014764696411704706875143999512324796159143337962049328862201363730863058939153023202491647207463690583303257097713162312964440840996064326665152661461727846915558574874105698371980660904062725090939226442757184999096218976292908283996809419270118025373653105325440851686840161421655608563959297436587891908305181457908993588610844942228269327504947887382920720914342240935727168193299780407160012709388661933566573744616195609240598206002763599719674948771256638523402402717374103337131809549409657444168750293843846501624904497491344508028587284886442639681450385912618903969887971697999527588243598772097193098313618410004422174897997424753565255281793016697063473397073014532419044327914643376901229075459370103816958959368006266513326597759163121512268368990639046107924447474814766921834438217759136998966095397420134346859351666356275556422534991184235154850804648648344140403971386949411485121242891139183112858680"_mpz, 68190404U },
};

static bool
test_imaginary_quadratic_class_group(unsigned long niter)
{
    bool ret = true;

    /* nonnegative discriminant should throw a exception */
    for (unsigned long i = 0; i < niter; ++i) {
        cxx_mpz Dpos = u64_random(state);
        fmt::print("Building class group with discriminant {}\n", Dpos);
        try {
            imaginary_quadratic_class_group cl(Dpos);
            ret = false;
        } catch (std::runtime_error &e) {
            fmt::print("Correctly throw an exception\n");
        }
    }

    /* discriminant = 2,3 mod 4 should throw a exception */
    for (unsigned long i = 0; i < niter; ++i) {
        cxx_mpz D = 0U;
        while (mpz_sgn(D) >= 0 || mpz_fdiv_ui(D, 4) == 0
                               || mpz_fdiv_ui(D, 4) == 1) {
            D = i64_random(state);
        }
        fmt::print("Building class group with discriminant {}\n", D);
        try {
            imaginary_quadratic_class_group cl(D);
            ret = false;
        } catch (std::runtime_error &e) {
            fmt::print("Correctly throw an exception\n");
        }
    }

    /* test method bound_generating_set_grh */
    for (auto const & [D, ref]: Discriminants) {
        imaginary_quadratic_class_group cl(D);
        unsigned long B = cl.bound_generating_set_grh();
        ret &= B == ref;
    }

    /* */
    return ret;
}

static bool
test_imaginary_quadratic_form_one(imaginary_quadratic_class_group const & cl)
{
    bool ret = true;
    fmt::print("Testing quadratic forms with {}\n", cl);
    cxx_mpz one = 1U;
    cxx_mpz mone = -1;
    cxx_mpz b = mpz_fdiv_ui(cl.discriminant(), 4U);
    cxx_mpz c;
    mpz_sub(c, b, cl.discriminant());
    mpz_fdiv_q_ui(c, c, 4U);

    imaginary_quadratic_form id1 = cl.one();
    imaginary_quadratic_form id2 = cl(one, b, c);

    ret &= id1 == id2;

    /* should throw if a is neg */
    try {
        cl(mone, b, c);
        ret = false;
    } catch (std::domain_error const & e) {
    }
    /* should throw if discriminant is not correct */
    try {
        cxx_mpz wrong_c;
        mpz_add_ui(wrong_c, c, 1U);
        cl(one, b, wrong_c);
        ret = false;
    } catch (std::domain_error const & e) {
    }
    /* should throw if form is not primitive */
    try {
        unsigned long k = u64_random(state);
        cxx_mpz ka = k, kb, kc;
        mpz_mul_ui(kb, b, k);
        mpz_mul_ui(kc, c, k);
        cl(ka, kb, kc);
        ret = false;
    } catch (imaginary_quadratic_form::not_primitive const & e) {
    }

    /* check that forms are reduced in ctor */
    unsigned long k = u64_random(state) >> 1;
    cxx_mpz b2, c2;
    mpz_add_ui(b2, b, 2*k);
    mpz_add_ui(c2, b, k);
    mpz_mul_ui(c2, c2, k);
    mpz_add(c2, c, c2);
    imaginary_quadratic_form f = cl(one, b2, c2);
    ret &= f.is_one() && f == id1;

    mpz_neg(b2, b2);
    imaginary_quadratic_form g = cl(c2, b2, one);
    ret &= g.is_one() && g == id1;

    return ret;
}

static bool
test_imaginary_quadratic_form(unsigned long niter)
{
    bool ret = true;

    for (unsigned long i = 0; i < niter; ++i) {
        cxx_mpz D = 0U;
        while (mpz_sgn(D) >= 0 || mpz_fdiv_ui(D, 4) == 2
                               || mpz_fdiv_ui(D, 4) == 3) {
            D = i64_random(state);
        }
        imaginary_quadratic_class_group cl(D);
        ret &= test_imaginary_quadratic_form_one(cl);
    }

    /* */
    return ret;
}

// coverity[root_function]
int main(int argc, char const * argv[])
{
    unsigned long iter = 100;
    tests_common_cmdline(&argc, &argv, PARSE_SEED | PARSE_ITER);
    tests_common_get_iter(&iter);

    bool all_ok = true;

    all_ok &= test_imaginary_quadratic_class_group(iter);
    all_ok &= test_imaginary_quadratic_form(iter);

    tests_common_clear();
    return all_ok ? EXIT_SUCCESS : EXIT_FAILURE;
}
